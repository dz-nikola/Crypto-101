{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "private_outputs": true,
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# 0. Imports"
      ],
      "metadata": {
        "id": "wmXd89DTMyoX"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install yfinance"
      ],
      "metadata": {
        "id": "dIsGTYp0YoVW"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from bs4 import BeautifulSoup\n",
        "import requests\n",
        "import yfinance as yf\n",
        "from datetime import date\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "import numpy as np\n",
        "import ipywidgets as widgets\n",
        "import plotly.express as px\n",
        "import plotly.graph_objects as go"
      ],
      "metadata": {
        "id": "KshEIJ10VybG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 1. Scrap Data from coinmarketcap.com"
      ],
      "metadata": {
        "id": "VZAKbjrQVOHQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Create empty lists to store the data\n",
        "crypto_name_list = []\n",
        "crypto_market_cap_list = []\n",
        "crypto_price_list = []\n",
        "crypto_circulating_supply_list = []\n",
        "crypto_symbol_list = []\n",
        "crypto_volume_list = []\n",
        "\n",
        "#create a function to scrape data where we can select date and number of crypto\n",
        "def cryptoscrape(date,n):\n",
        "    \"\"\"\n",
        "    Scrapes the data from the coinmarketcap website \n",
        "\n",
        "    Parameters:  \n",
        "    - date: A string specifying the date until which the database of coinmarketcap should be upadted (use today's date if you want most recent data)\n",
        "    - n: The amount of cryptocurrencies that should be scraped and stored\n",
        "    \"\"\"\n",
        "    url = 'https://coinmarketcap.com/historical/'+date+'/'\n",
        "    webpage = requests.get(url)\n",
        "    #Parse text from website\n",
        "    soup = BeautifulSoup(webpage.text, 'html.parser')\n",
        "\n",
        "    #get the table row element --> this is where the data is stored \n",
        "    tr = soup.find_all('tr',attrs={'class':'cmc-table-row'})\n",
        "    #Count variable for the number of crypto that we want to scrape\n",
        "    variable = 0\n",
        "    #Loop through every row\n",
        "    for row in tr:\n",
        "        if variable == n:\n",
        "            break;\n",
        "        variable = variable + 1 #we will stop after scrapping n cryptos\n",
        "\n",
        "        #store name of crypto\n",
        "        #find the td element (Column) to get the name\n",
        "        name_column = row.find('td',attrs={'class':'cmc-table__cell cmc-table__cell--sticky cmc-table__cell--sortable cmc-table__cell--left cmc-table__cell--sort-by__name'})\n",
        "        crypto_name = name_column.find('a',attrs={'class':'cmc-table__column-name--name cmc-link'}).text.strip()\n",
        "        crypto_name_list.append(crypto_name)\n",
        "        #store symbol\n",
        "        crypto_symbol = name_column.find('a', attrs={'class':'cmc-table__column-name--symbol cmc-link'}).text.strip()\n",
        "        crypto_symbol_list.append(crypto_symbol)\n",
        "        #store market cap\n",
        "        crypto_market_cap = row.find('td', attrs={'class':'cmc-table__cell cmc-table__cell--sortable cmc-table__cell--right cmc-table__cell--sort-by__market-cap'}).text.strip()\n",
        "        crypto_market_cap_list.append(crypto_market_cap)\n",
        "        #Price\n",
        "        crypto_price = row.find('td',attrs={'class':'cmc-table__cell cmc-table__cell--sortable cmc-table__cell--right cmc-table__cell--sort-by__price'}).text.strip()\n",
        "        crypto_price_list.append(crypto_price)\n",
        "        #circulating supply\n",
        "        crypto_supply = row.find('td', attrs={'class':'cmc-table__cell cmc-table__cell--sortable cmc-table__cell--right cmc-table__cell--sort-by__circulating-supply'}).text.strip()\n",
        "        crypto_supply2 = crypto_supply.split(' ',1)[0]\n",
        "        crypto_circulating_supply_list.append(crypto_supply2)\n",
        "        #volume\n",
        "        crypto_volume = row.find('td', attrs={'class':'cmc-table__cell cmc-table__cell--sortable cmc-table__cell--right cmc-table__cell--sort-by__volume-24-h'}).text.strip()\n",
        "        crypto_volume_list.append(crypto_volume)\n"
      ],
      "metadata": {
        "id": "iyj4YY_UV3bO"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Get yesterday's date and convert it to the correct format to be used in our function\n",
        "import datetime\n",
        "yesterday = date.today()-datetime.timedelta(days=1)\n",
        "#Calling our function with yesterday's date and the number of crypto wanted\n",
        "cryptoscrape(yesterday.strftime(\"%Y%m%d\"), 20)"
      ],
      "metadata": {
        "id": "r2WJp00COjOe"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Create a data frame and store data\n",
        "df = pd.DataFrame()\n",
        "df['Name'] = crypto_name_list\n",
        "df['Symbol'] = crypto_symbol_list\n",
        "df['Market Cap'] = crypto_market_cap_list\n",
        "df['Price'] = crypto_price_list\n",
        "df['Number of Tokens circulating'] = crypto_circulating_supply_list\n",
        "df['Volume last 24h'] = crypto_volume_list"
      ],
      "metadata": {
        "id": "tUlHTsAlV4q8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#2. Data Cleaning\n",
        "\n"
      ],
      "metadata": {
        "id": "SyAlBX8eX3WR"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#before building some visualizations, do some data cleaning because format is not adequate\n",
        "#Column Market Cap is not a float\n",
        "df['Market Cap'] = df['Market Cap'].str.replace('$','')\n",
        "df['Market Cap'] = df['Market Cap'].str.replace(',','')\n",
        "df['Market Cap'] = pd.to_numeric(df['Market Cap'])\n",
        "#Column Volume last 24h is not a float\n",
        "df['Volume last 24h'] = df['Volume last 24h'].str.replace('$','')\n",
        "df['Volume last 24h'] = df['Volume last 24h'].str.replace(',','')\n",
        "df['Volume last 24h'] = pd.to_numeric(df['Volume last 24h'])"
      ],
      "metadata": {
        "id": "5RaB9pEomqB8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df.style.format({\"Market Cap\": \"{:,}\",\"Volume last 24h\": \"{:,}\"})"
      ],
      "metadata": {
        "id": "I-rpD_aBcKoC"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#3. We are now loading historical data of coins that we scrapped before"
      ],
      "metadata": {
        "id": "_HmTJc0oV50Q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#We will use yahoofinance module to load historical data \n",
        "#we will create a dictionnary so we can store key = \"BTC\" and value = DataFrame containing historical data\n",
        "d = {}\n",
        "for i in crypto_symbol_list:\n",
        "  d[i] = pd.DataFrame()\n",
        "\n",
        "#we load data from yfinance module for each symbol and store it in the dataframes in the dictionnary\n",
        "for s in crypto_symbol_list:\n",
        "  ticker = yf.Ticker(s+\"-USD\")\n",
        "  d[s] = (ticker.history(start = '2017-12-21', end = '2022-12-21', interval = '1d'))\n",
        "  #we only keep revelant column\n",
        "  d[s] = d[s][[\"Close\"]] \n",
        "  #change format of the date\n",
        "  d[s].index = pd.to_datetime(d[s].index, format='%m/%d/%Y').strftime('%Y-%m-%d') \n",
        "  #calculating daily return\n",
        "  d[s][\"Daily Return\"] = d[s][\"Close\"].pct_change(1)\n"
      ],
      "metadata": {
        "id": "KM21J7Z9yr1C"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#4.Data has been scrapped/loaded we can used it to show some visualizations\n"
      ],
      "metadata": {
        "id": "lMHI0dDbWIbM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#Pie chart to show Market Cap\n",
        "fig = px.pie(df, values ='Market Cap', names = 'Symbol', title = \"Market cap ($) per coin in %\")\n",
        "fig.update_traces(textposition='inside', textinfo='percent+label')\n",
        "fig.show()"
      ],
      "metadata": {
        "id": "qC644M7YYbIM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Bar chart showing Volume last 24h\n",
        "fig2 = px.bar(df, x='Symbol',y='Volume last 24h')\n",
        "fig2.update_layout(xaxis={'categoryorder': 'total descending'})\n",
        "fig2.show()"
      ],
      "metadata": {
        "id": "x96wWUUmd8W_"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#Historical chart\n",
        "def show_hist(crypto):\n",
        "  df = d[crypto].copy()\n",
        "  df['Close'].plot(figsize=(12,7))\n",
        "  plt.title('Historical Price'+' '+crypto)\n",
        "  plt.ylabel(\"Price in $\")\n",
        "widgets.interact(show_hist, crypto = [i for i in d.keys()])"
      ],
      "metadata": {
        "id": "gtCwyiSVEgOx"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#5.Create Momentum strategy \n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "sTHNWOktW8_u"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cryptos_to_analyze=[]\n",
        "for x in d.keys():\n",
        "  if len(d[x][\"Daily Return\"])>1800:\n",
        "    cryptos_to_analyze.append(x)"
      ],
      "metadata": {
        "id": "DCMnt9KB0RwN"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Creation of a Dataframe (df_returns) with the 10d historical returns of all cryptos containing enough data (i.e, cryptos with more than 1800 days of data)."
      ],
      "metadata": {
        "id": "r__EuSOdq7xr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "dicto={}\n",
        "for w in cryptos_to_analyze:\n",
        "  list1=[]\n",
        "  for i in range(180):\n",
        "     #Advance by 10 days each time so 180 bins of 10 days returns each time.\n",
        "    list1.append([d[w][\"Close\"].values[i*10:i*10+10]]) \n",
        "  list2=[x for x in range(1,181)]\n",
        "  df=pd.DataFrame()\n",
        "  for i, sublist in enumerate(list1):\n",
        "    for j in range(len(sublist)):\n",
        "      df[i]=sublist[j]\n",
        "  df1=df\n",
        "  listos=[]\n",
        "  for i in range(len(df1.columns)):\n",
        "    a=0\n",
        "    a=(df1.iloc[-1,i])/(df1.iloc[0,i])-1\n",
        "    listos.append(a)\n",
        "  dicto[w]=listos\n",
        "  df_returns=pd.DataFrame(data=dicto)"
      ],
      "metadata": {
        "id": "QiM0PBTQeP_N"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Add a score between 0-9 for the best, and worst performing crypto of the considered period"
      ],
      "metadata": {
        "id": "TF9ffLKsrM0a"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_returns[[\"BTC Score\",\"ETH Score\",\"USDT Score\",\"BNB Score\",\"XRP Score\",\"DOGE Score\",\"ADA Score\",\"TRX Score\",\"LTC Score\"]]=df_returns.apply(lambda x: pd.qcut(x, q=10, labels=False), axis=1)\n",
        "df_returns.head()\n"
      ],
      "metadata": {
        "id": "8yolxaWz5Ccq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "isolation of a matrix containing only the scores from 0-9"
      ],
      "metadata": {
        "id": "O6eauAD6rXL0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_scores=df_returns.iloc[:,9:]"
      ],
      "metadata": {
        "id": "cxEI4UiT5h1v"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Creation of a weight matrix. If the score of the previous week is 8 or 9 (high momentum) we will go long 50% + 50% of our portfolio for the next period in those 2 coins. If the score of the previous week is 0 or 1 (low performers), then we will go short -50% + -50% those 2 coins for the next period."
      ],
      "metadata": {
        "id": "bXkOScc-rjvr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_weights=df_scores.copy()\n",
        "df_weights.columns=df_weights.columns.str.replace('Score', ' Weight')\n",
        "df_weights_copy=df_weights.copy()\n",
        "for i in range(1,len(df_weights)):\n",
        "  for j in range(len(df_weights.columns)):\n",
        "    if df_weights_copy.iloc[i-1,j]==9:\n",
        "      df_weights.iloc[i,j]=0.5\n",
        "    elif df_weights_copy.iloc[i-1,j]==8:\n",
        "      df_weights.iloc[i,j]=0.5\n",
        "    elif df_weights_copy.iloc[i-1,j]==0:\n",
        "      df_weights.iloc[i,j]=-0.5\n",
        "    elif df_weights_copy.iloc[i-1,j]==1:\n",
        "      df_weights.iloc[i,j]=-0.5\n",
        "    else:\n",
        "      df_weights.iloc[i,j]=0"
      ],
      "metadata": {
        "id": "70p_A2JDAyvz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Remove the first line of matrix of weights and returns to realize a scalar product of each line to calculate period performance later."
      ],
      "metadata": {
        "id": "hb3EPk-EsDr3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_weights_to_calculate=df_weights.iloc[1:,:]\n",
        "df_returns_to_calculate=df_returns.iloc[1:,:9]"
      ],
      "metadata": {
        "id": "YRJahACSM4EK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "l=[]\n",
        "for i in range(len(df_weights_to_calculate)):\n",
        "  a=0\n",
        "  for j in range(len(df_weights_to_calculate.columns)):\n",
        "    a=a+df_weights_to_calculate.iloc[i,j]*df_returns_to_calculate.iloc[i,j]\n",
        "  l.append(a)\n",
        "\n",
        "tot_return=[]\n",
        "a=1\n",
        "for i in l:\n",
        "  a=round(a*(1+i), 2)\n",
        "  tot_return.append(a)\n",
        "print(\"Our total return is: {returns} %\".format(returns=(a-1)*100))"
      ],
      "metadata": {
        "id": "3X_zJgLLTEgn"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Here is a plot of the evolution of the portfolio, as we can see, it is quite volatile."
      ],
      "metadata": {
        "id": "xXzUEmozt001"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.set(rc = {'figure.figsize':(15,8)})\n",
        "sns.lineplot(x=df_returns_to_calculate.index,y=tot_return,color=\"orange\").set(title='Total Return of Momentum') #Even though the return looks huge, important to take into account that cryptos like BNB were multiplied by 100x in that timeframe"
      ],
      "metadata": {
        "id": "rxBq2dEcWxmd"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 6. Moving Averages Strategy\n"
      ],
      "metadata": {
        "id": "OTjz6dzN0imM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def SMA_strat(crypto,MA):\n",
        "  \"\"\"\n",
        "  Implementing the Moving Average Strategy\n",
        "\n",
        "  Parameters:\n",
        "  - crypto: The cryptocurrencies that should be included in the trading strategy\n",
        "  - MA: The amount of days the moving average should be based on \n",
        "  \"\"\"\n",
        "  df=d[crypto].copy() \n",
        "  df[\"{number} MA\".format(number=MA)]=df[\"Close\"].rolling(MA).mean()\n",
        "  df.dropna()\n",
        "  # Now we shift the moving average 1 period backwards, i.e if the close of today is above the moving average of yesterday, we assign 1 (we will go long for the next day)\n",
        "  df[\"Above\"]=np.where(df[\"Close\"]>df[\"{number} MA\".format(number=MA)].shift(1),1,0)\n",
        "  # Next we multiply the return of today by the position of yesterday to avoid look-ahead bias, i.e we went long yesterday and therefore we profit or loose by the value of today's change by yesterday's position\n",
        "  df[\"Long Return\"]=df[\"Above\"].shift(1)*df[\"Daily Return\"] \n",
        "  df.iloc[0,4]=0\n",
        "  df[\"Portfolio ammount\"]=np.cumprod(1+df[\"Long Return\"])-1\n",
        "  df[\"Long {coin}\".format(coin=crypto)]=np.cumprod(1+df[\"Daily Return\"])-1\n",
        "  df[[\"Close\",\"{number} MA\".format(number=MA)]].plot(figsize=(12,7))\n",
        "  df[[\"Portfolio ammount\",\"Long {coin}\".format(coin=crypto)]].plot(figsize=(12,7))\n",
        "\n",
        "  print(\"The return of the strategy is : {dat} %\".format(dat=df[\"Portfolio ammount\"][-1]*100))\n",
        "  print(\"The return of long only crypto is : {dat} %\".format(dat=df[\"Long {coin}\".format(coin=crypto)][-1]*100))\n",
        "  \n"
      ],
      "metadata": {
        "id": "KQdrzNLnlVFv"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Here we can dynamicly change the MA and the cryptocurrency of our choice."
      ],
      "metadata": {
        "id": "9ddHwnTvu-6J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "widgets.interact(SMA_strat, crypto=[i for i in d.keys()],MA=[20,50,150,200])"
      ],
      "metadata": {
        "id": "y9GswBzo9XuM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "We can observe by tweaking some of the results that some coins are proned for this kind of strategies wherease others do not observe a very good performance. "
      ],
      "metadata": {
        "id": "BUo9Pj_XMhvW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# 7. Moving Averages Cross-over"
      ],
      "metadata": {
        "id": "HKKH4HeX72or"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "oIrUkgA4Ttof"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def Ma_Cross(crypto):\n",
        "  \"\"\"\n",
        "  Implementing the Moving Average Cross-over Strategy\n",
        "\n",
        "  Parameters:\n",
        "  - crypto: The cryptocurrencies that should be included in the trading strategy\n",
        "  \"\"\"\n",
        "  df=d[crypto].copy() \n",
        "  df[\"50 SMA\"]=df[\"Close\"].rolling(50).mean()\n",
        "  df[\"20 SMA\"]=df[\"Close\"].rolling(20).mean()\n",
        "  df.dropna()\n",
        "  # Important to look at the previous day for our case, to avoid bias\n",
        "  df[\"Above\"]=np.where(df[\"20 SMA\"].shift(1)>df[\"50 SMA\"].shift(1),1,0)\n",
        "  # We multiply the return of today by the position of yesterday to avoid look-ahead bias, i.e we went long yesterday and therefore we profit or loose by the value of today's change by yesterday's position \n",
        "  df[\"Long Return\"]=df[\"Above\"].shift(1)*df[\"Daily Return\"] \n",
        "  df.iloc[0,5]=0\n",
        "  df[\"Portfolio ammount\"]=np.cumprod(1+df[\"Long Return\"])-1\n",
        "  df[\"Long {coin}\".format(coin=crypto)]=np.cumprod(1+df[\"Daily Return\"])-1\n",
        "  df[\"Indication\"]=df[\"Above\"].diff()\n",
        "  df[\"Long\"] = np.where(df[\"Indication\"] == 1,df[\"Close\"],np.NaN)\n",
        "  df[\"Cash\"] = np.where(df[\"Indication\"] == -1,df[\"Close\"],np.NaN)\n",
        "  fig=px.line(df,x=df.index,y=df.Close)\n",
        "  fig.add_trace(go.Scatter(x=df.index,y=df.Long,mode='markers',name=\"Entry\",marker=dict(color='Green',size=10)))\n",
        "  fig.add_trace(go.Scatter(x=df.index,y=df.Cash,mode='markers',name=\"Exit\",marker=dict(color='Red',size=10)))\n",
        "  fig.add_trace(go.Scatter(x=df.index,y=df[\"20 SMA\"],mode='lines',name=\"20 SMA\",marker=dict(color='Orange'),opacity=0.5))\n",
        "  fig.add_trace(go.Scatter(x=df.index,y=df[\"50 SMA\"],mode='lines',name=\"50 SMA\", marker=dict(color='Grey'),opacity=0.5))\n",
        "\n",
        "  fig.show()\n",
        "  print(\"The return of the strategy is : {dat} %\".format(dat=df[\"Portfolio ammount\"][-1]*100))\n",
        "  print(\"The return of long only crypto is : {dat} %\".format(dat=df[\"Long {coin}\".format(coin=crypto)][-1]*100))\n"
      ],
      "metadata": {
        "id": "Dl1VmFdC8lb9"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Here we call the function"
      ],
      "metadata": {
        "id": "lCn5ghKjNUQD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "Ma_Cross(\"BTC\")"
      ],
      "metadata": {
        "id": "CT7AUiX2Mquj"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}